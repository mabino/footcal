<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title><%= title %></title>
  <script src="<%= BASE_PATH %>/fullcalendar/index.global.js"></script>
  <style>
    body { font-family: sans-serif; padding: 1em; }
    #debug { background: #f0f0f0; padding: 10px; border: 1px solid #ccc; margin-bottom: 20px; display: none; }
    .error { color: red; font-weight: bold; }
    pre { background: #eee; padding: 10px; overflow: auto; }
    
    /* Calendar styling */
    #calendar {
      max-width: 1100px;
      margin: 0 auto;
    }
    
    /* Calendar filters styling */
    #calendar-filters {
      max-width: 1100px;
      margin: 0 auto 20px auto;
      padding: 10px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .filter-title {
      font-weight: bold;
      margin-bottom: 10px;
    }
    
    .calendar-filter {
      display: inline-block;
      margin-right: 15px;
      margin-bottom: 8px;
      cursor: pointer;
    }
    
    .calendar-filter input {
      margin-right: 5px;
      cursor: pointer;
    }
    
    .calendar-filter label {
      cursor: pointer;
      padding: 3px 8px;
      border-radius: 3px;
      display: inline-block;
    }
    
    .calendar-filter label:hover {
      opacity: 0.9;
    }
    
    #toggle-all-container {
      margin-bottom: 10px;
      padding-bottom: 10px;
      border-bottom: 1px solid #ddd;
    }
    
    /* Debug toggle button */
    #debug-toggle {
      margin-bottom: 10px;
      padding: 5px 10px;
      background: #f0f0f0;
      border: 1px solid #ccc;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1><%= title %></h1>
  
  <button id="debug-toggle" onclick="toggleDebug()">Show Debug Info</button>
  
  <div id="debug">
    <h2>Debug Information</h2>
    <p>BASE_PATH: <strong><%= BASE_PATH %></strong></p>
    <p>Current URL: <strong id="current-url"></strong></p>
    
    <h3>Resource URLs</h3>
    <ul>
      <li>JS: <code><%= BASE_PATH %>/fullcalendar/index.global.js</code></li>
      <li>Events: <code><%= BASE_PATH %>/events</code></li>
    </ul>
    
    <div id="resource-status">Loading resource status...</div>
    <div id="fetch-status">Fetch status will appear here...</div>
  </div>
  
  <div id="loading">Loading calendar...</div>
  
  <!-- Calendar filters will be added here -->
  <div id="calendar-filters">
    <div id="toggle-all-container">
      <div class="calendar-filter">
        <input type="checkbox" id="toggle-all" checked>
        <label for="toggle-all">Show/Hide All</label>
      </div>
    </div>
    <div id="calendar-sources"></div>
  </div>
  
  <div id="calendar"></div>
  
  <script>
    // Global variables
    let calendar;
    let allFeeds = {};
    let activeFeeds = {};
    
    // Function to toggle debug info
    function toggleDebug() {
      const debug = document.getElementById('debug');
      const button = document.getElementById('debug-toggle');
      if (debug.style.display === 'none') {
        debug.style.display = 'block';
        button.textContent = 'Hide Debug Info';
      } else {
        debug.style.display = 'none';
        button.textContent = 'Show Debug Info';
      }
    }
    
    // Immediately log basic information
    console.log('Page loaded');
    console.log('BASE_PATH:', '<%= BASE_PATH %>');
    document.getElementById('current-url').textContent = window.location.href;
    
    // Check resources
    const resourceStatus = document.getElementById('resource-status');
    const fetchStatus = document.getElementById('fetch-status');
    const loading = document.getElementById('loading');
    
    // Function to add status messages
    function addStatus(element, message, isError = false) {
      const p = document.createElement('p');
      p.textContent = message;
      if (isError) p.className = 'error';
      element.appendChild(p);
      console.log(isError ? 'ERROR: ' : 'INFO: ', message);
    }
    
    // Clear initial message
    resourceStatus.textContent = '';
    
    // Check if FullCalendar is defined
    if (typeof FullCalendar !== 'undefined') {
      addStatus(resourceStatus, '✅ FullCalendar object is available');
      loadEvents();
    } else {
      addStatus(resourceStatus, '❌ FullCalendar object is NOT available', true);
    }
    
    function loadEvents() {
      // Test events API
      const eventsUrl = '<%= BASE_PATH %>/events';
      fetchStatus.textContent = '';
      addStatus(fetchStatus, `Fetching events from: ${eventsUrl}`);
      
      fetch(eventsUrl)
        .then(response => {
          if (!response.ok) {
            addStatus(fetchStatus, `❌ Events API returned status: ${response.status}`, true);
            return Promise.reject(`HTTP error! status: ${response.status}`);
          }
          
          addStatus(fetchStatus, `✅ Events API response received with status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          addStatus(fetchStatus, `✅ Received data with ${data.events ? data.events.length : 0} events`);
          
          if (data.events && Array.isArray(data.events)) {
            addStatus(fetchStatus, `✅ Found ${data.events.length} events`);
          } else {
            addStatus(fetchStatus, `❌ No events array found in response`, true);
          }
          
          // Initialize calendar
          if (data.events) {
            allFeeds = data.feeds || {};
            // Initially all feeds are active
            activeFeeds = {...allFeeds};
            initializeCalendar(data.events);
            createCalendarFilters();
          } else {
            loading.textContent = 'Cannot initialize calendar: No events data';
          }
        })
        .catch(error => {
          addStatus(fetchStatus, `❌ Error fetching events: ${error}`, true);
          loading.textContent = 'Failed to load calendar: Network error';
        });
    }
    
function initializeCalendar(events) {
  try {
    addStatus(fetchStatus, '✅ Initializing calendar...');
    calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
      initialView: 'listWeek',
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,listWeek'
      },
      events: events,
      eventDidMount: function (info) {
        const source = info.event.extendedProps.source;
        
        // Set the color
        const color = allFeeds[source]?.color || '#888';
        info.el.style.backgroundColor = color;
        info.el.style.borderColor = color;
        
        console.log('[eventDidMount] Styled event:', info.event.id, 'source:', source);
      }
    });
    calendar.render();
    loading.style.display = 'none';
    addStatus(fetchStatus, '✅ Calendar rendered successfully');
  } catch (e) {
    addStatus(fetchStatus, `❌ Error initializing calendar: ${e.message}`, true);
    loading.textContent = `Failed to initialize calendar: ${e.message}`;
  }
}
 
    
    function createCalendarFilters() {
      const sourcesContainer = document.getElementById('calendar-sources');
      const toggleAll = document.getElementById('toggle-all');
      sourcesContainer.innerHTML = '';
      // Create a checkbox for each feed
      Object.keys(allFeeds).forEach(feedId => {
        const feed = allFeeds[feedId];
        const color = feed.color || '#888';
        const name = feed.name || feedId;

        const filterDiv = document.createElement('div');
        filterDiv.className = 'calendar-filter';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.id = `filter-${feedId}`;
        checkbox.checked = true;
        checkbox.addEventListener('change', function() {
          toggleFeed(feedId, this.checked);
        });

        const label = document.createElement('label');
        label.htmlFor = `filter-${feedId}`;
        label.textContent = name;
        label.style.backgroundColor = color;
        label.style.color = '#000';

        filterDiv.appendChild(checkbox);
        filterDiv.appendChild(label);
        sourcesContainer.appendChild(filterDiv);
      });
      
      // Set up toggle all functionality
      toggleAll.addEventListener('change', function() {
        const isChecked = this.checked;
        
        // Update all checkboxes
        document.querySelectorAll('#calendar-sources input[type="checkbox"]').forEach(checkbox => {
          checkbox.checked = isChecked;
        });
        
        // Update active feeds and immediately update visibility
        if (isChecked) {
          activeFeeds = {...allFeeds};
        } else {
          activeFeeds = {};
        }
        
        updateEventVisibility();
      });
    }
    
    function toggleFeed(feedId, isActive) {
      console.log('[toggleFeed] feedId:', feedId, 'isActive:', isActive);
      if (isActive) {
        activeFeeds[feedId] = allFeeds[feedId];
      } else {
        delete activeFeeds[feedId];
      }
      // Update "toggle all" checkbox state
      const allChecked = Object.keys(activeFeeds).length === Object.keys(allFeeds).length;
      const noneChecked = Object.keys(activeFeeds).length === 0;
      document.getElementById('toggle-all').checked = allChecked;
      document.getElementById('toggle-all').indeterminate = !allChecked && !noneChecked;
      // Debug: log current activeFeeds
      console.log('[toggleFeed] activeFeeds:', Object.keys(activeFeeds));
      
      // Immediately update event visibility for all currently rendered events
      updateEventVisibility();
    }


 function updateEventVisibility() {
  console.log('[updateEventVisibility] Updating visibility for activeFeeds:', Object.keys(activeFeeds));
  
  // Get only the currently visible event elements
  const eventElements = document.querySelectorAll('.fc-event');
  
  eventElements.forEach(eventEl => {
    // Try different ways to get the event data from the DOM element
    let eventData = null;
    
    // Method 1: Check if there's a data attribute
    if (eventEl.dataset && eventEl.dataset.eventId) {
      const eventId = eventEl.dataset.eventId;
      eventData = calendar.getEventById(eventId);
    }
    
    // Method 2: Look for FullCalendar's internal event reference
    if (!eventData && eventEl.fcSeg) {
      eventData = eventEl.fcSeg.event;
    }
    
    // Method 3: Check classList for source information
    if (!eventData) {
      const classList = Array.from(eventEl.classList);
      const sourceClass = classList.find(cls => cls.startsWith('fc-event-source-'));
      if (sourceClass) {
        const source = sourceClass.replace('fc-event-source-', '');
        const shouldShow = !!activeFeeds[source];
        eventEl.style.display = shouldShow ? '' : 'none';
        return;
      }
    }
    
    // If we found event data, use the source from extendedProps
    if (eventData && eventData.extendedProps && eventData.extendedProps.source) {
      const source = eventData.extendedProps.source;
      const shouldShow = !!activeFeeds[source];
      eventEl.style.display = shouldShow ? '' : 'none';
      console.log('[updateEventVisibility]', shouldShow ? 'Showing' : 'Hiding', 'event from source:', source);
    }
  });
}
 

    
    function refreshCalendar() {
      // Simply update visibility without refetching events
      updateEventVisibility();
    }
    
    // Helper function to determine text color based on background color
    function getContrastColor(hexColor) {
      // Remove # if present
      hexColor = hexColor.replace('#', '');
      
      // Convert to RGB
      const r = parseInt(hexColor.substr(0, 2), 16);
      const g = parseInt(hexColor.substr(2, 2), 16);
      const b = parseInt(hexColor.substr(4, 2), 16);
      
      // Calculate luminance
      const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
      
      // Return black or white based on luminance
      return luminance > 0.5 ? '#000000' : '#ffffff';
    }
  </script>
</body>
</html>
