<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title><%= title %></title>
  <!-- Remove the CSS link since it doesn't exist -->
  <script src="<%= BASE_PATH %>/fullcalendar/index.global.js"></script>
  <style>
    body { font-family: sans-serif; padding: 1em; }
    #debug { background: #f0f0f0; padding: 10px; border: 1px solid #ccc; margin-bottom: 20px; display: none; } /* Hide debug by default */
    .error { color: red; font-weight: bold; }
    pre { background: #eee; padding: 10px; overflow: auto; }
    
    /* Add some basic styling for the calendar */
    #calendar {
      max-width: 1100px;
      margin: 0 auto;
    }
    
    /* Add a toggle button for debug info */
    #debug-toggle {
      margin-bottom: 10px;
      padding: 5px 10px;
      background: #f0f0f0;
      border: 1px solid #ccc;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1><%= title %></h1>
  
  <button id="debug-toggle" onclick="toggleDebug()">Show Debug Info</button>
  
  <div id="debug">
    <h2>Debug Information</h2>
    <p>BASE_PATH: <strong><%= BASE_PATH %></strong></p>
    <p>Current URL: <strong id="current-url"></strong></p>
    
    <h3>Resource URLs</h3>
    <ul>
      <li>JS: <code><%= BASE_PATH %>/fullcalendar/index.global.js</code></li>
      <li>Events: <code><%= BASE_PATH %>/events</code></li>
    </ul>
    
    <div id="resource-status">Loading resource status...</div>
    <div id="fetch-status">Fetch status will appear here...</div>
  </div>
  
  <div id="loading">Loading calendar...</div>
  <div id="calendar"></div>
  
  <script>
    // Function to toggle debug info
    function toggleDebug() {
      const debug = document.getElementById('debug');
      const button = document.getElementById('debug-toggle');
      if (debug.style.display === 'none') {
        debug.style.display = 'block';
        button.textContent = 'Hide Debug Info';
      } else {
        debug.style.display = 'none';
        button.textContent = 'Show Debug Info';
      }
    }
    
    // Immediately log basic information
    console.log('Page loaded');
    console.log('BASE_PATH:', '<%= BASE_PATH %>');
    document.getElementById('current-url').textContent = window.location.href;
    
    // Check resources
    const resourceStatus = document.getElementById('resource-status');
    const fetchStatus = document.getElementById('fetch-status');
    const loading = document.getElementById('loading');
    
    // Function to add status messages
    function addStatus(element, message, isError = false) {
      const p = document.createElement('p');
      p.textContent = message;
      if (isError) p.className = 'error';
      element.appendChild(p);
      console.log(isError ? 'ERROR: ' : 'INFO: ', message);
    }
    
    // Clear initial message
    resourceStatus.textContent = '';
    
    // Check if FullCalendar is defined
    if (typeof FullCalendar !== 'undefined') {
      addStatus(resourceStatus, '✅ FullCalendar object is available');
      loadEvents();
    } else {
      addStatus(resourceStatus, '❌ FullCalendar object is NOT available', true);
    }
    
    function loadEvents() {
      // Test events API
      const eventsUrl = '<%= BASE_PATH %>/events';
      fetchStatus.textContent = '';
      addStatus(fetchStatus, `Fetching events from: ${eventsUrl}`);
      
      fetch(eventsUrl)
        .then(response => {
          if (!response.ok) {
            addStatus(fetchStatus, `❌ Events API returned status: ${response.status}`, true);
            return Promise.reject(`HTTP error! status: ${response.status}`);
          }
          
          addStatus(fetchStatus, `✅ Events API response received with status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          addStatus(fetchStatus, `✅ Received data with ${data.events ? data.events.length : 0} events`);
          
          if (data.events && Array.isArray(data.events)) {
            addStatus(fetchStatus, `✅ Found ${data.events.length} events`);
          } else {
            addStatus(fetchStatus, `❌ No events array found in response`, true);
          }
          
          // Initialize calendar
          if (data.events) {
            initializeCalendar(data.events, data.feeds);
          } else {
            loading.textContent = 'Cannot initialize calendar: No events data';
          }
        })
        .catch(error => {
          addStatus(fetchStatus, `❌ Error fetching events: ${error}`, true);
          loading.textContent = 'Failed to load calendar: Network error';
        });
    }
    
    function initializeCalendar(events, feeds) {
      try {
        addStatus(fetchStatus, '✅ Initializing calendar...');
        const calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
          initialView: 'listWeek',
          headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,listWeek'
          },
          events: events,
          eventDidMount: function (info) {
            const source = info.event.extendedProps.source;
            const color = feeds[source]?.color || '#888';
            info.el.style.backgroundColor = color;
            info.el.style.borderColor = color;
          }
        });
        
        calendar.render();
        loading.style.display = 'none';
        addStatus(fetchStatus, '✅ Calendar rendered successfully');
      } catch (e) {
        addStatus(fetchStatus, `❌ Error initializing calendar: ${e.message}`, true);
        loading.textContent = `Failed to initialize calendar: ${e.message}`;
      }
    }
  </script>
</body>
</html>
