<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title><%= title %></title>
  <script src="<%= BASE_PATH %>/fullcalendar/index.global.js"></script>
  <style>
    body { font-family: sans-serif; padding: 1em; }
    #debug { background: #f0f0f0; padding: 10px; border: 1px solid #ccc; margin-bottom: 20px; display: none; }
    .error { color: red; font-weight: bold; }
    pre { background: #eee; padding: 10px; overflow: auto; }
    
    /* Calendar styling */
    #calendar {
      max-width: 1100px;
      margin: 0 auto;
    }
    
    /* Calendar filters styling */
    #calendar-filters {
      max-width: 1100px;
      margin: 0 auto 20px auto;
      padding: 10px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .filter-title {
      font-weight: bold;
      margin-bottom: 10px;
    }
    
    .calendar-filter {
      display: inline-block;
      margin-right: 15px;
      margin-bottom: 8px;
      cursor: pointer;
    }
    
    .calendar-filter input {
      margin-right: 5px;
      cursor: pointer;
    }
    
    .calendar-filter label {
      cursor: pointer;
      padding: 3px 8px;
      border-radius: 3px;
      display: inline-block;
    }
    
    .calendar-filter label:hover {
      opacity: 0.9;
    }
    
    #toggle-all-container {
      margin-bottom: 10px;
      padding-bottom: 10px;
      border-bottom: 1px solid #ddd;
    }
    
    /* Debug toggle button */
    #debug-toggle {
      margin-bottom: 10px;
      padding: 5px 10px;
      background: #f0f0f0;
      border: 1px solid #ccc;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1><%= title %></h1>
  
  <button id="debug-toggle" onclick="toggleDebug()">Show Debug Info</button>
  
  <div id="debug">
    <h2>Debug Information</h2>
    <p>BASE_PATH: <strong><%= BASE_PATH %></strong></p>
    <p>Current URL: <strong id="current-url"></strong></p>
    
    <h3>Resource URLs</h3>
    <ul>
      <li>JS: <code><%= BASE_PATH %>/fullcalendar/index.global.js</code></li>
      <li>Events: <code><%= BASE_PATH %>/events</code></li>
    </ul>
    
    <div id="resource-status">Loading resource status...</div>
    <div id="fetch-status">Fetch status will appear here...</div>
  </div>
  
  <div id="loading">Loading calendar...</div>
  
  <!-- Calendar filters will be added here -->
  <div id="calendar-filters">
    <div id="toggle-all-container">
      <div class="calendar-filter">
        <input type="checkbox" id="toggle-all" checked>
        <label for="toggle-all">Show/Hide All</label>
      </div>
    </div>
    <div id="calendar-sources"></div>
  </div>
  
  <div id="calendar"></div>
  
  <script>
    // Global variables
    let calendar;
    let calendarSources = {};
    let activeCalendars = {};
    
    // Function to toggle debug info
    function toggleDebug() {
      const debug = document.getElementById('debug');
      const button = document.getElementById('debug-toggle');
      if (debug.style.display === 'none') {
        debug.style.display = 'block';
        button.textContent = 'Hide Debug Info';
      } else {
        debug.style.display = 'none';
        button.textContent = 'Show Debug Info';
      }
    }
    
    // Immediately log basic information
    console.log('Page loaded');
    console.log('BASE_PATH:', '<%= BASE_PATH %>');
    document.getElementById('current-url').textContent = window.location.href;
    
    // Check resources
    const resourceStatus = document.getElementById('resource-status');
    const fetchStatus = document.getElementById('fetch-status');
    const loading = document.getElementById('loading');
    
    // Function to add status messages
    function addStatus(element, message, isError = false) {
      const p = document.createElement('p');
      p.textContent = message;
      if (isError) p.className = 'error';
      element.appendChild(p);
      console.log(isError ? 'ERROR: ' : 'INFO: ', message);
    }
    
    // Clear initial message
    resourceStatus.textContent = '';
    
    // Check if FullCalendar is defined
    if (typeof FullCalendar !== 'undefined') {
      addStatus(resourceStatus, '✅ FullCalendar object is available');
      loadEvents();
    } else {
      addStatus(resourceStatus, '❌ FullCalendar object is NOT available', true);
    }
    
    function loadEvents() {
      // Test events API
      const eventsUrl = '<%= BASE_PATH %>/events';
      fetchStatus.textContent = '';
      addStatus(fetchStatus, `Fetching events from: ${eventsUrl}`);
      
      fetch(eventsUrl)
        .then(response => {
          if (!response.ok) {
            addStatus(fetchStatus, `❌ Events API returned status: ${response.status}`, true);
            return Promise.reject(`HTTP error! status: ${response.status}`);
          }
          
          addStatus(fetchStatus, `✅ Events API response received with status: ${response.status}`);
          return response.json();
        })
        .then(data => {
          addStatus(fetchStatus, `✅ Received data with ${data.events ? data.events.length : 0} events`);
          
          if (data.events && Array.isArray(data.events)) {
            addStatus(fetchStatus, `✅ Found ${data.events.length} events`);
            
            // Process calendar sources from events
            processCalendarSources(data.events);
            
            // Initialize calendar
            initializeCalendar(data.events);
            
            // Create calendar filters based on sources
            createCalendarFilters();
          } else {
            addStatus(fetchStatus, `❌ No events array found in response`, true);
            loading.textContent = 'Cannot initialize calendar: No events data';
          }
        })
        .catch(error => {
          addStatus(fetchStatus, `❌ Error fetching events: ${error}`, true);
          loading.textContent = 'Failed to load calendar: Network error';
        });
    }
    
    function processCalendarSources(events) {
      // Extract unique calendar sources and their properties
      events.forEach(event => {
        if (event.source && !calendarSources[event.source]) {
          // Create a new calendar source entry
          calendarSources[event.source] = {
            id: event.source,
            name: event.calname || event.source, // Use X-WR-CALNAME if available
            color: event.color || getRandomColor()
          };
          
          // Initially all calendars are active
          activeCalendars[event.source] = true;
        }
      });
      
      addStatus(fetchStatus, `✅ Processed ${Object.keys(calendarSources).length} calendar sources`);
    }
    
    function initializeCalendar(events) {
      try {
        addStatus(fetchStatus, '✅ Initializing calendar...');
        calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
          initialView: 'listWeek',
          headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,listWeek'
          },
          events: events,
          eventDidMount: function(info) {
            // Apply visibility based on active calendars
            if (!activeCalendars[info.event.extendedProps.source]) {
              info.el.style.display = 'none';
            }
          }
        });
        
        calendar.render();
        loading.style.display = 'none';
        addStatus(fetchStatus, '✅ Calendar rendered successfully');
      } catch (e) {
        addStatus(fetchStatus, `❌ Error initializing calendar: ${e.message}`, true);
        loading.textContent = `Failed to initialize calendar: ${e.message}`;
      }
    }
    
    function createCalendarFilters() {
      const sourcesContainer = document.getElementById('calendar-sources');
      const toggleAll = document.getElementById('toggle-all');
      
      // Create a checkbox for each calendar source
      Object.values(calendarSources).forEach(source => {
        const filterDiv = document.createElement('div');
        filterDiv.className = 'calendar-filter';
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.id = `filter-${source.id}`;
        checkbox.checked = true;
        checkbox.addEventListener('change', function() {
          toggleCalendar(source.id, this.checked);
        });
        
        const label = document.createElement('label');
        label.htmlFor = `filter-${source.id}`;
        label.textContent = source.name;
        label.style.backgroundColor = source.color;
        label.style.color = getContrastColor(source.color);
        
        filterDiv.appendChild(checkbox);
        filterDiv.appendChild(label);
        sourcesContainer.appendChild(filterDiv);
      });
      
      // Set up toggle all functionality
      toggleAll.addEventListener('change', function() {
        const isChecked = this.checked;
        
        // Update all checkboxes
        document.querySelectorAll('#calendar-sources input[type="checkbox"]').forEach(checkbox => {
          checkbox.checked = isChecked;
        });
        
        // Update active calendars
        Object.keys(calendarSources).forEach(sourceId => {
          activeCalendars[sourceId] = isChecked;
        });
        
        // Refresh calendar display
        refreshCalendarDisplay();
      });
    }
    
    function toggleCalendar(sourceId, isActive) {
      // Update active state
      activeCalendars[sourceId] = isActive;
      
      // Update "toggle all" checkbox state
      const totalSources = Object.keys(calendarSources).length;
      const activeSources = Object.values(activeCalendars).filter(active => active).length;
      
      const toggleAllCheckbox = document.getElementById('toggle-all');
      toggleAllCheckbox.checked = activeSources === totalSources;
      toggleAllCheckbox.indeterminate = activeSources > 0 && activeSources < totalSources;
      
      // Refresh calendar display
      refreshCalendarDisplay();
    }
    
    function refreshCalendarDisplay() {
      // Update visibility of all events based on active calendars
      const allEvents = calendar.getEvents();
      
      allEvents.forEach(event => {
        const sourceId = event.extendedProps.source;
        const isVisible = activeCalendars[sourceId];
        
        // Find the DOM element for this event and update visibility
        calendar.getEventById(event.id)._def.ui.display = isVisible ? '' : 'none';
      });
      
      // Force calendar to re-render all events
      calendar.refetchEvents();
    }
    
    // Helper function to determine text color based on background color
    function getContrastColor(hexColor) {
      // Remove # if present
      hexColor = hexColor.replace('#', '');
      
      // Convert to RGB
      const r = parseInt(hexColor.substr(0, 2), 16);
      const g = parseInt(hexColor.substr(2, 2), 16);
      const b = parseInt(hexColor.substr(4, 2), 16);
      
      // Calculate luminance
      const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
      
      // Return black or white based on luminance
      return luminance > 0.5 ? '#000000' : '#ffffff';
    }
    
    // Helper function to generate random colors for calendars without defined colors
    function getRandomColor() {
      const letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }
  </script>
</body>
</html>
